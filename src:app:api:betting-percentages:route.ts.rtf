{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ```\
import \{ NextRequest, NextResponse \} from 'next/server';\
\
export async function GET(request: NextRequest) \{\
  try \{\
    // This is a mock implementation since we can't actually scrape in this environment\
    // In a real implementation, this would use a headless browser or HTTP requests to scrape data\
    \
    const sport = request.nextUrl.searchParams.get('sport') || 'all';\
    const validSports = ['mlb', 'nba', 'nhl'];\
    \
    if (sport !== 'all' && !validSports.includes(sport)) \{\
      return NextResponse.json(\
        \{ error: `Invalid sport. Must be one of: $\{validSports.join(', ')\} or 'all'` \},\
        \{ status: 400 \}\
      );\
    \}\
    \
    // Mock data for betting percentages\
    const mockData = \{\
      mlb: [\
        \{\
          away_team: "New York Yankees",\
          home_team: "Cleveland Guardians",\
          away_bet_percentage: "45",\
          home_bet_percentage: "55",\
          away_money_percentage: "38",\
          home_money_percentage: "62",\
          market: "moneyline"\
        \},\
        \{\
          away_team: "Cincinnati Reds",\
          home_team: "Miami Marlins",\
          away_bet_percentage: "62",\
          home_bet_percentage: "38",\
          away_money_percentage: "70",\
          home_money_percentage: "30",\
          market: "moneyline"\
        \},\
        \{\
          away_team: "San Diego Padres",\
          home_team: "Detroit Tigers",\
          away_bet_percentage: "58",\
          home_bet_percentage: "42",\
          away_money_percentage: "65",\
          home_money_percentage: "35",\
          market: "moneyline"\
        \}\
      ],\
      nba: [\
        \{\
          away_team: "Boston Celtics",\
          home_team: "Miami Heat",\
          away_bet_percentage: "72",\
          home_bet_percentage: "28",\
          away_money_percentage: "80",\
          home_money_percentage: "20",\
          market: "moneyline"\
        \},\
        \{\
          away_team: "Denver Nuggets",\
          home_team: "Los Angeles Lakers",\
          away_bet_percentage: "48",\
          home_bet_percentage: "52",\
          away_money_percentage: "55",\
          home_money_percentage: "45",\
          market: "moneyline"\
        \}\
      ],\
      nhl: [\
        \{\
          away_team: "Toronto Maple Leafs",\
          home_team: "Tampa Bay Lightning",\
          away_bet_percentage: "42",\
          home_bet_percentage: "58",\
          away_money_percentage: "35",\
          home_money_percentage: "65",\
          market: "moneyline"\
        \},\
        \{\
          away_team: "Edmonton Oilers",\
          home_team: "Vegas Golden Knights",\
          away_bet_percentage: "51",\
          home_bet_percentage: "49",\
          away_money_percentage: "60",\
          home_money_percentage: "40",\
          market: "moneyline"\
        \}\
      ]\
    \};\
    \
    if (sport === 'all') \{\
      return NextResponse.json(mockData);\
    \} else \{\
      return NextResponse.json(\{ [sport]: mockData[sport] \});\
    \}\
    \
  \} catch (error) \{\
    console.error('Error fetching betting percentages:', error);\
    return NextResponse.json(\
      \{ error: 'Failed to fetch betting percentages' \},\
      \{ status: 500 \}\
    );\
  \}\
\}\
```}